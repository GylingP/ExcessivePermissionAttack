package utils

import (
	"context"
	"errors"
	"fmt"
	"k8sRBACdetect/pkg/request"
	"strings"

	"github.com/tidwall/gjson"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func GetSecrets(token string, adminName string, SaNamespace string) (string, error) { //https://192.168.183.130:6443/api/v1/secrets/
	opts := request.K8sRequestOption{
		Api:    "/api/v1/secrets",
		Method: "GET",
		Token:  token,
	}
	resp, err := request.ApiRequest(opts)
	if err != nil {
		return "", err
	}
	secrets := gjson.Get(resp, "items").Array()
	for _, secret := range secrets {
		//fmt.Println(secret.Get("metadata.name").String())
		if strings.Contains(secret.Get("metadata.name").String(), adminName) {
			return secret.Get("data.token").String(), nil
		}
	}

	//如果没有listSecret权限，则上面的模糊查询查不到，则需要指明namespace和secret名来定向获取
	clientset := request.GetClientSet(token)
	secret, err := clientset.CoreV1().Secrets(SaNamespace).Get(context.TODO(), adminName, metav1.GetOptions{})
	if err != nil {
		fmt.Println(err)
	} else {
		return secret.String(), nil
	}
	return "", errors.New("未找到secret")
}
